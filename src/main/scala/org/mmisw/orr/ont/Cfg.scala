// generated by tscfg 0.3.3 on Fri Sep 02 08:57:56 PDT 2016
// source: src/main/resources/orront.spec.conf

package org.mmisw.orr.ont

object Cfg {
  object Admin {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Admin = {
      Admin(
        c.get.getString("email"),
        c.map(c => if(c.hasPathOrNull("extra")) Some(c.getString("extra")) else None).get,
        c.get.getString("password")
      )
    }
  }
  case class Admin(
    email    : java.lang.String,
    extra    : scala.Option[java.lang.String],
    password : java.lang.String
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "email    = " + this.email + "\n"+
      i+ "extra    = " + this.extra + "\n"+
      i+ "password = " + this.password + "\n"
    }
  }
  object Agraph {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Agraph = {
      Agraph(
        c.map(c => if(c.hasPathOrNull("host")) c.getString("host") else "localhost").get,
        c.get.getString("password"),
        c.map(c => if(c.hasPathOrNull("port")) c.getInt("port") else 10035).get,
        c.map(c => if(c.hasPathOrNull("repoName")) c.getString("repoName") else "mmiorr").get,
        c.get.getString("sparqlEndpoint"),
        c.get.getString("userName")
      )
    }
  }
  case class Agraph(
    host           : java.lang.String,
    password       : java.lang.String,
    port           : scala.Int,
    repoName       : java.lang.String,
    sparqlEndpoint : java.lang.String,
    userName       : java.lang.String
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "host           = " + this.host + "\n"+
      i+ "password       = " + this.password + "\n"+
      i+ "port           = " + this.port + "\n"+
      i+ "repoName       = " + this.repoName + "\n"+
      i+ "sparqlEndpoint = " + this.sparqlEndpoint + "\n"+
      i+ "userName       = " + this.userName + "\n"
    }
  }
  object Auth {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Auth = {
      Auth(
        c.get.getString("secret")
      )
    }
  }
  case class Auth(
    secret : java.lang.String
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "secret = " + this.secret + "\n"
    }
  }
  object Branding {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Branding = {
      Branding(
        c.map(c => if(c.hasPathOrNull("footer")) Some(c.getString("footer")) else None).get,
        c.get.getString("instanceName")
      )
    }
  }
  case class Branding(
    footer       : scala.Option[java.lang.String],
    instanceName : java.lang.String
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "footer       = " + this.footer + "\n"+
      i+ "instanceName = " + this.instanceName + "\n"
    }
  }
  object Deployment {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Deployment = {
      Deployment(
        c.get.getString("url")
      )
    }
  }
  case class Deployment(
    url : java.lang.String
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "url = " + this.url + "\n"
    }
  }
  object Email {
    object Account {
      def apply(c: com.typesafe.config.Config) = build(Some(c))
      def apply() = build(None)
      def build(c: scala.Option[com.typesafe.config.Config]): Account = {
        Account(
          c.get.getString("password"),
          c.get.getString("username")
        )
      }
    }
    case class Account(
      password : java.lang.String,
      username : java.lang.String
    ) {
      override def toString: java.lang.String = toString("")
      def toString(i:java.lang.String): java.lang.String = {
        i+ "password = " + this.password + "\n"+
        i+ "username = " + this.username + "\n"
      }
    }
    object Server {
      def apply(c: com.typesafe.config.Config) = build(Some(c))
      def apply() = build(None)
      def build(c: scala.Option[com.typesafe.config.Config]): Server = {
        Server(
          c.map(c => if(c.hasPathOrNull("debug")) c.getBoolean("debug") else false).get,
          c.get.getString("host"),
          c.get.getInt("port"),
          c.map(c => if(c.hasPathOrNull("prot")) c.getString("prot") else "smtps").get
        )
      }
    }
    case class Server(
      debug : scala.Boolean,
      host  : java.lang.String,
      port  : scala.Int,
      prot  : java.lang.String
    ) {
      override def toString: java.lang.String = toString("")
      def toString(i:java.lang.String): java.lang.String = {
        i+ "debug = " + this.debug + "\n"+
        i+ "host  = " + this.host + "\n"+
        i+ "port  = " + this.port + "\n"+
        i+ "prot  = " + this.prot + "\n"
      }
    }
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Email = {
      Email(
        Account.build(c.map(c => if (c.hasPath("account")) Some(c.getConfig("account")) else None).get),
        c.get.getString("from"),
        c.get.getString("mailer"),
        c.get.getString("replyTo"),
        Server.build(c.map(c => if (c.hasPath("server")) Some(c.getConfig("server")) else None).get)
      )
    }
  }
  case class Email(
    account : Cfg.Email.Account,
    from    : java.lang.String,
    mailer  : java.lang.String,
    replyTo : java.lang.String,
    server  : Cfg.Email.Server
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "account:\n" + this.account.toString(i+"    ")+
      i+ "from    = " + this.from + "\n"+
      i+ "mailer  = " + this.mailer + "\n"+
      i+ "replyTo = " + this.replyTo + "\n"+
      i+ "server:\n" + this.server.toString(i+"    ")
    }
  }
  object Files {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Files = {
      Files(
        c.get.getString("baseDirectory")
      )
    }
  }
  case class Files(
    baseDirectory : java.lang.String
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "baseDirectory = " + this.baseDirectory + "\n"
    }
  }
  object GoogleAnalytics {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): GoogleAnalytics = {
      GoogleAnalytics(
        c.map(c => if(c.hasPathOrNull("propertyId")) Some(c.getString("propertyId")) else None).get
      )
    }
  }
  case class GoogleAnalytics(
    propertyId : scala.Option[java.lang.String]
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "propertyId = " + this.propertyId + "\n"
    }
  }
  object Mongo {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Mongo = {
      Mongo(
        c.map(c => if(c.hasPathOrNull("db")) c.getString("db") else "orr-ont").get,
        c.map(c => if(c.hasPathOrNull("host")) c.getString("host") else "localhost").get,
        c.map(c => if(c.hasPathOrNull("ontologies")) c.getString("ontologies") else "ontologies").get,
        c.map(c => if(c.hasPathOrNull("organizations")) c.getString("organizations") else "organizations").get,
        c.map(c => if(c.hasPathOrNull("port")) c.getInt("port") else 27017).get,
        c.map(c => if(c.hasPathOrNull("pw")) Some(c.getString("pw")) else None).get,
        c.map(c => if(c.hasPathOrNull("user")) Some(c.getString("user")) else None).get,
        c.map(c => if(c.hasPathOrNull("users")) c.getString("users") else "users").get
      )
    }
  }
  case class Mongo(
    db            : java.lang.String,
    host          : java.lang.String,
    ontologies    : java.lang.String,
    organizations : java.lang.String,
    port          : scala.Int,
    pw            : scala.Option[java.lang.String],
    user          : scala.Option[java.lang.String],
    users         : java.lang.String
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "db            = " + this.db + "\n"+
      i+ "host          = " + this.host + "\n"+
      i+ "ontologies    = " + this.ontologies + "\n"+
      i+ "organizations = " + this.organizations + "\n"+
      i+ "port          = " + this.port + "\n"+
      i+ "pw            = " + this.pw + "\n"+
      i+ "user          = " + this.user + "\n"+
      i+ "users         = " + this.users + "\n"
    }
  }
  object Notifications {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Notifications = {
      Notifications(
        c.map(c => if(c.hasPathOrNull("recipientsFilename")) Some(c.getString("recipientsFilename")) else None).get
      )
    }
  }
  case class Notifications(
    recipientsFilename : scala.Option[java.lang.String]
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "recipientsFilename = " + this.recipientsFilename + "\n"
    }
  }
  object Recaptcha {
    def apply(c: com.typesafe.config.Config) = build(Some(c))
    def apply() = build(None)
    def build(c: scala.Option[com.typesafe.config.Config]): Recaptcha = {
      Recaptcha(
        c.map(c => if(c.hasPathOrNull("privateKey")) Some(c.getString("privateKey")) else None).get
      )
    }
  }
  case class Recaptcha(
    privateKey : scala.Option[java.lang.String]
  ) {
    override def toString: java.lang.String = toString("")
    def toString(i:java.lang.String): java.lang.String = {
      i+ "privateKey = " + this.privateKey + "\n"
    }
  }
  def apply(c: com.typesafe.config.Config) = build(Some(c))
  def apply() = build(None)
  def build(c: scala.Option[com.typesafe.config.Config]): Cfg = {
    Cfg(
      Admin.build(c.map(c => if (c.hasPath("admin")) Some(c.getConfig("admin")) else None).get),
      Agraph.build(c.map(c => if (c.hasPath("agraph")) Some(c.getConfig("agraph")) else None).get),
      Auth.build(c.map(c => if (c.hasPath("auth")) Some(c.getConfig("auth")) else None).get),
      Branding.build(c.map(c => if (c.hasPath("branding")) Some(c.getConfig("branding")) else None).get),
      Deployment.build(c.map(c => if (c.hasPath("deployment")) Some(c.getConfig("deployment")) else None).get),
      Email.build(c.map(c => if (c.hasPath("email")) Some(c.getConfig("email")) else None).get),
      Files.build(c.map(c => if (c.hasPath("files")) Some(c.getConfig("files")) else None).get),
      GoogleAnalytics.build(c.map(c => if (c.hasPath("googleAnalytics")) Some(c.getConfig("googleAnalytics")) else None).get),
      Mongo.build(c.map(c => if (c.hasPath("mongo")) Some(c.getConfig("mongo")) else None).get),
      Notifications.build(c.map(c => if (c.hasPath("notifications")) Some(c.getConfig("notifications")) else None).get),
      Recaptcha.build(c.map(c => if (c.hasPath("recaptcha")) Some(c.getConfig("recaptcha")) else None).get)
    )
  }
}
case class Cfg(
  admin           : Cfg.Admin,
  agraph          : Cfg.Agraph,
  auth            : Cfg.Auth,
  branding        : Cfg.Branding,
  deployment      : Cfg.Deployment,
  email           : Cfg.Email,
  files           : Cfg.Files,
  googleAnalytics : Cfg.GoogleAnalytics,
  mongo           : Cfg.Mongo,
  notifications   : Cfg.Notifications,
  recaptcha       : Cfg.Recaptcha
) {
  override def toString: java.lang.String = toString("")
  def toString(i:java.lang.String): java.lang.String = {
    i+ "admin:\n" + this.admin.toString(i+"    ")+
    i+ "agraph:\n" + this.agraph.toString(i+"    ")+
    i+ "auth:\n" + this.auth.toString(i+"    ")+
    i+ "branding:\n" + this.branding.toString(i+"    ")+
    i+ "deployment:\n" + this.deployment.toString(i+"    ")+
    i+ "email:\n" + this.email.toString(i+"    ")+
    i+ "files:\n" + this.files.toString(i+"    ")+
    i+ "googleAnalytics:\n" + this.googleAnalytics.toString(i+"    ")+
    i+ "mongo:\n" + this.mongo.toString(i+"    ")+
    i+ "notifications:\n" + this.notifications.toString(i+"    ")+
    i+ "recaptcha:\n" + this.recaptcha.toString(i+"    ")
  }
}
