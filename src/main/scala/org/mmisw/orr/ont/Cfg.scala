// generated by tscfg 0.8.3 on Fri Nov 17 17:48:34 PST 2017
// source: src/main/resources/orront.spec.conf

package org.mmisw.orr.ont

case class Cfg(
  admin           : Cfg.Admin,
  agraph          : Cfg.Agraph,
  auth            : Cfg.Auth,
  branding        : Cfg.Branding,
  deployment      : Cfg.Deployment,
  email           : Cfg.Email,
  files           : Cfg.Files,
  googleAnalytics : Cfg.GoogleAnalytics,
  mongo           : Cfg.Mongo,
  recaptcha       : Cfg.Recaptcha
)
object Cfg {
  case class Admin(
    email    : java.lang.String,
    extra    : scala.Option[java.lang.String],
    password : java.lang.String
  )
  object Admin {
    def apply(c: com.typesafe.config.Config): Cfg.Admin = {
      Cfg.Admin(
        email    = c.getString("email"),
        extra    = if(c.hasPathOrNull("extra")) Some(c.getString("extra")) else None,
        password = c.getString("password")
      )
    }
  }
        
  case class Agraph(
    host           : java.lang.String,
    initDelay      : scala.Option[scala.Long],
    password       : java.lang.String,
    port           : scala.Int,
    repoName       : java.lang.String,
    sparqlEndpoint : java.lang.String,
    userName       : java.lang.String
  )
  object Agraph {
    def apply(c: com.typesafe.config.Config): Cfg.Agraph = {
      Cfg.Agraph(
        host           = if(c.hasPathOrNull("host")) c.getString("host") else "localhost",
        initDelay      = if(c.hasPathOrNull("initDelay")) Some(c.getDuration("initDelay", java.util.concurrent.TimeUnit.SECONDS)) else None,
        password       = c.getString("password"),
        port           = if(c.hasPathOrNull("port")) c.getInt("port") else 10035,
        repoName       = if(c.hasPathOrNull("repoName")) c.getString("repoName") else "mmiorr",
        sparqlEndpoint = c.getString("sparqlEndpoint"),
        userName       = c.getString("userName")
      )
    }
  }
        
  case class Auth(
    secret : java.lang.String
  )
  object Auth {
    def apply(c: com.typesafe.config.Config): Cfg.Auth = {
      Cfg.Auth(
        secret = c.getString("secret")
      )
    }
  }
        
  case class Branding(
    footer       : scala.Option[java.lang.String],
    instanceName : java.lang.String
  )
  object Branding {
    def apply(c: com.typesafe.config.Config): Cfg.Branding = {
      Cfg.Branding(
        footer       = if(c.hasPathOrNull("footer")) Some(c.getString("footer")) else None,
        instanceName = c.getString("instanceName")
      )
    }
  }
        
  case class Deployment(
    url : java.lang.String
  )
  object Deployment {
    def apply(c: com.typesafe.config.Config): Cfg.Deployment = {
      Cfg.Deployment(
        url = c.getString("url")
      )
    }
  }
        
  case class Email(
    account : Cfg.Email.Account,
    from    : java.lang.String,
    mailer  : java.lang.String,
    replyTo : java.lang.String,
    server  : Cfg.Email.Server
  )
  object Email {
    case class Account(
      password : java.lang.String,
      username : java.lang.String
    )
    object Account {
      def apply(c: com.typesafe.config.Config): Cfg.Email.Account = {
        Cfg.Email.Account(
          password = c.getString("password"),
          username = c.getString("username")
        )
      }
    }
          
    case class Server(
      debug : scala.Boolean,
      host  : java.lang.String,
      port  : scala.Int,
      prot  : java.lang.String
    )
    object Server {
      def apply(c: com.typesafe.config.Config): Cfg.Email.Server = {
        Cfg.Email.Server(
          debug = c.hasPathOrNull("debug") && c.getBoolean("debug"),
          host  = c.getString("host"),
          port  = c.getInt("port"),
          prot  = if(c.hasPathOrNull("prot")) c.getString("prot") else "smtps"
        )
      }
    }
          
    def apply(c: com.typesafe.config.Config): Cfg.Email = {
      Cfg.Email(
        account = Cfg.Email.Account(c.getConfig("account")),
        from    = c.getString("from"),
        mailer  = c.getString("mailer"),
        replyTo = c.getString("replyTo"),
        server  = Cfg.Email.Server(c.getConfig("server"))
      )
    }
  }
        
  case class Files(
    baseDirectory : java.lang.String
  )
  object Files {
    def apply(c: com.typesafe.config.Config): Cfg.Files = {
      Cfg.Files(
        baseDirectory = c.getString("baseDirectory")
      )
    }
  }
        
  case class GoogleAnalytics(
    propertyId : scala.Option[java.lang.String]
  )
  object GoogleAnalytics {
    def apply(c: com.typesafe.config.Config): Cfg.GoogleAnalytics = {
      Cfg.GoogleAnalytics(
        propertyId = if(c.hasPathOrNull("propertyId")) Some(c.getString("propertyId")) else None
      )
    }
  }
        
  case class Mongo(
    db            : java.lang.String,
    host          : java.lang.String,
    ontologies    : java.lang.String,
    organizations : java.lang.String,
    port          : scala.Int,
    pw            : scala.Option[java.lang.String],
    user          : scala.Option[java.lang.String],
    users         : java.lang.String
  )
  object Mongo {
    def apply(c: com.typesafe.config.Config): Cfg.Mongo = {
      Cfg.Mongo(
        db            = if(c.hasPathOrNull("db")) c.getString("db") else "orr-ont",
        host          = if(c.hasPathOrNull("host")) c.getString("host") else "localhost",
        ontologies    = if(c.hasPathOrNull("ontologies")) c.getString("ontologies") else "ontologies",
        organizations = if(c.hasPathOrNull("organizations")) c.getString("organizations") else "organizations",
        port          = if(c.hasPathOrNull("port")) c.getInt("port") else 27017,
        pw            = if(c.hasPathOrNull("pw")) Some(c.getString("pw")) else None,
        user          = if(c.hasPathOrNull("user")) Some(c.getString("user")) else None,
        users         = if(c.hasPathOrNull("users")) c.getString("users") else "users"
      )
    }
  }
        
  case class Recaptcha(
    privateKey : scala.Option[java.lang.String]
  )
  object Recaptcha {
    def apply(c: com.typesafe.config.Config): Cfg.Recaptcha = {
      Cfg.Recaptcha(
        privateKey = if(c.hasPathOrNull("privateKey")) Some(c.getString("privateKey")) else None
      )
    }
  }
        
  def apply(c: com.typesafe.config.Config): Cfg = {
    Cfg(
      admin           = Cfg.Admin(c.getConfig("admin")),
      agraph          = Cfg.Agraph(c.getConfig("agraph")),
      auth            = Cfg.Auth(c.getConfig("auth")),
      branding        = Cfg.Branding(c.getConfig("branding")),
      deployment      = Cfg.Deployment(c.getConfig("deployment")),
      email           = Cfg.Email(c.getConfig("email")),
      files           = Cfg.Files(c.getConfig("files")),
      googleAnalytics = Cfg.GoogleAnalytics(c.getConfig("googleAnalytics")),
      mongo           = Cfg.Mongo(c.getConfig("mongo")),
      recaptcha       = Cfg.Recaptcha(c.getConfig("recaptcha"))
    )
  }
}
      
